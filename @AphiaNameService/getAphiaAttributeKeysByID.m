function xReturn = getAphiaAttributeKeysByID(obj,id,include_children)
%getAphiaAttributeKeysByID(obj,id,include_children)
%
%   <strong>Get attribute definitions. To refer to root items specify ID = '0'</strong>
%   		<br />Parameters:
%   		<ul>
%   			<li><u>id</u>: The attribute definition id to search for</li>
%   			<li><u>include_children</u>: Include the tree of children. Default=true</li>
%   		</ul>
%   		<br />Returns definition objects that have the following structure:
%   		<br /> <ul><li>	<u><b>measurementTypeID</b></u> : An internal identifier for the measurementType</li><li>	<u><b>measurementType</b></u> : The nature of the measurement, fact, characteristic, or assertion <a href='http://www.marinespecies.org/traits/wiki' target='_blank'>http://www.marinespecies.org/traits/wiki</a></li><li>	<u><b>input_id</b></u> : The data type that is expected as value for this attribute definition</li><li>	<u><b>CategoryID</b></u> : The category identifier to list possible attribute values for this attribute definition</li><li>	<u><b>children</b></u> : The possible child attribute keys that help to describe to current attribute</li></ul>
%   
%     Input:
%       id = (int)
%       include_children = (boolean)
%   
%     Output:
%       return{:} = (AttributeKey)

% Build up the argument lists.
values = { ...
   id, ...
   include_children, ...
   };
names = { ...
   'id', ...
   'include_children', ...
   };
types = { ...
   '{http://www.w3.org/2001/XMLSchema}int', ...
   '{http://www.w3.org/2001/XMLSchema}boolean', ...
   };

% Create the message, make the call, and convert the response into a variable.
soapMessage = createSoapMessage( ...
    'http://aphia/v1.0/AttributeKeys', ...
    'getAphiaAttributeKeysByID', ...
    values,names,types,'rpc');
response = callSoapService( ...
    obj.endpoint, ...
    'getAphiaAttributeKeysByID', ...
    soapMessage);
xReturn = parseSoapResponse(response);

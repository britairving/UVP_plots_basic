function xReturn = getAphiaRecordsByNames(obj,scientificnames,like,fuzzy,marine_only)
%getAphiaRecordsByNames(obj,scientificnames,like,fuzzy,marine_only)
%
%   <strong>For each given scientific name, try to find one or more AphiaRecords. This allows you to match multiple names in one call. Limited to 500 names at once for performance reasons.</strong>
%   		<br />Parameters:
%   		<ul>
%   			<li><u>like</u>: Add a '%'-sign after the ScientificName (SQL LIKE function). Default=false</li>
%   			<li><u>fuzzy</u>: This parameter is deprecated (and ignored since '2013-07-17'). Please use the function matchAphiaRecordsByNames() for fuzzy/near matching</li>
%   			<li><u>marine_only</u>: Limit to marine taxa. Default=true</li>
%   		</ul>
%   		<br /> For the structure of the returned AphiaRecords, please refer to the function getAphiaRecordByID()
%   
%     Input:
%       scientificnames{:} = (string)
%       like = (boolean)
%       fuzzy = (boolean)
%       marine_only = (boolean)
%   
%     Output:
%       return{:} = (AphiaRecords)

% Build up the argument lists.
values = { ...
   scientificnames, ...
   like, ...
   fuzzy, ...
   marine_only, ...
   };
names = { ...
   'scientificnames', ...
   'like', ...
   'fuzzy', ...
   'marine_only', ...
   };
types = { ...
   '{http://www.w3.org/2001/XMLSchema}string[]', ...
   '{http://www.w3.org/2001/XMLSchema}boolean', ...
   '{http://www.w3.org/2001/XMLSchema}boolean', ...
   '{http://www.w3.org/2001/XMLSchema}boolean', ...
   };

% Create the message, make the call, and convert the response into a variable.
soapMessage = createSoapMessage( ...
    'http://aphia/v1.0/AphiaMatches', ...
    'getAphiaRecordsByNames', ...
    values,names,types,'rpc');
response = callSoapService( ...
    obj.endpoint, ...
    'getAphiaRecordsByNames', ...
    soapMessage);
xReturn = parseSoapResponse(response);
